/*

94.子集和 (10分)
C时间限制：1 毫秒 |  C内存限制：65535 Kb
题目内容：
 对于由从1到N(1<=N<=39)这N个连续的整数组成的集合来说，我们有时可以将集合分成两个部分和相同的子集合。
例如，N=3时，可以将集合{1,2,3}分为{1,2}和{3}。此时称有一种方式（即与顺序无关）。
N=7时，共有四种方式可以将集合{1,2,3,...,7}分为两个部分和相同的子集合：
{1,6,7}和{2,3,4,5}
{2,5,7}和{1,3,4,6}
{3,4,7}和{1,2,5,6}
{1,2,4,7}和{3,5,6}
输入描述
程序从标准输入读入数据，只有一组测试用例。如上所述的N。

输出描述
方式数。若不存在这样的拆分，则输出0。

输入样例
7

输出样例
4
*/ 
#include<iostream>
#include<stdio.h>
using namespace std;

int main()
{
    int dp[40][391] = { 0 }, num, b_sum, Sum;
    scanf("%d", &num);
    Sum = (1 + num)*num / 2;
    b_sum = Sum / 2;
    if (Sum % 2 == 1)
    {
        printf("0\n");
        return 0;
    }
    dp[0][0] = 1;
    for (int i = 1; i <= num; i++)
    {
        for (int j = 1; j <= b_sum; j++)
        {
            if (j >= i)
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - i];
            else
                dp[i][j] = dp[i - 1][j];
        }
    }
    printf("%d", dp[num][b_sum]);
    return 0;
}

